[{"D:\\project\\weatherweb\\weatherweb\\src\\index.js":"1","D:\\project\\weatherweb\\weatherweb\\src\\config\\redux\\configureStore.js":"2","D:\\project\\weatherweb\\weatherweb\\src\\config\\redux\\reducer.js":"3","D:\\project\\weatherweb\\weatherweb\\src\\config\\redux\\actionCreators.js":"4","D:\\project\\weatherweb\\weatherweb\\src\\config\\weatherApi\\index.js":"5","D:\\project\\weatherweb\\weatherweb\\src\\containers\\pages\\Main.js":"6","D:\\project\\weatherweb\\weatherweb\\src\\components\\atoms\\Brand.js":"7","D:\\project\\weatherweb\\weatherweb\\src\\components\\molecules\\SearchBox.js":"8","D:\\project\\weatherweb\\weatherweb\\src\\components\\atoms\\SolidCard.js":"9","D:\\project\\weatherweb\\weatherweb\\src\\containers\\organisms\\Navbar.js":"10","D:\\project\\weatherweb\\weatherweb\\src\\components\\atoms\\GlassCard.js":"11","D:\\project\\weatherweb\\weatherweb\\src\\containers\\organisms\\CurrentWeather.js":"12","D:\\project\\weatherweb\\weatherweb\\src\\components\\atoms\\StatusIcon.js":"13","D:\\project\\weatherweb\\weatherweb\\src\\containers\\organisms\\TodayPred.js":"14","D:\\project\\weatherweb\\weatherweb\\src\\containers\\organisms\\Forecast.js":"15","D:\\project\\weatherweb\\weatherweb\\src\\config\\weatherApi\\apiKey.js":"16","D:\\project\\weatherweb\\weatherweb\\src\\containers\\pages\\App.js":"17","D:\\project\\weatherweb\\weatherweb\\src\\utils\\ConvertDate.js":"18","D:\\project\\weatherweb\\weatherweb\\src\\components\\atoms\\predItem.js":"19"},{"size":244,"mtime":1610797144883,"results":"20","hashOfConfig":"21"},{"size":288,"mtime":1610798567009,"results":"22","hashOfConfig":"21"},{"size":1469,"mtime":1611309638864,"results":"23","hashOfConfig":"21"},{"size":975,"mtime":1611309644872,"results":"24","hashOfConfig":"21"},{"size":2559,"mtime":1610816781027,"results":"25","hashOfConfig":"21"},{"size":1369,"mtime":1611302755747,"results":"26","hashOfConfig":"21"},{"size":148,"mtime":1610681451586,"results":"27","hashOfConfig":"21"},{"size":317,"mtime":1610727038754,"results":"28","hashOfConfig":"21"},{"size":155,"mtime":1610695628257,"results":"29","hashOfConfig":"21"},{"size":415,"mtime":1610704845027,"results":"30","hashOfConfig":"21"},{"size":155,"mtime":1610698946852,"results":"31","hashOfConfig":"21"},{"size":1696,"mtime":1611224908801,"results":"32","hashOfConfig":"21"},{"size":303,"mtime":1610806495614,"results":"33","hashOfConfig":"21"},{"size":2559,"mtime":1611316191824,"results":"34","hashOfConfig":"21"},{"size":1975,"mtime":1610813703868,"results":"35","hashOfConfig":"21"},{"size":56,"mtime":1610771704392,"results":"36","hashOfConfig":"21"},{"size":308,"mtime":1610797288083,"results":"37","hashOfConfig":"21"},{"size":1221,"mtime":1610813099502,"results":"38","hashOfConfig":"21"},{"size":464,"mtime":1611230950678,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"rdbg20",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"42"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"42"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"42"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"42"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"42"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"D:\\project\\weatherweb\\weatherweb\\src\\index.js",[],["84","85"],"D:\\project\\weatherweb\\weatherweb\\src\\config\\redux\\configureStore.js",[],"D:\\project\\weatherweb\\weatherweb\\src\\config\\redux\\reducer.js",[],"D:\\project\\weatherweb\\weatherweb\\src\\config\\redux\\actionCreators.js",[],"D:\\project\\weatherweb\\weatherweb\\src\\config\\weatherApi\\index.js",["86","87"],"import { apiKey } from './apiKey';\r\nimport geolocation from 'geolocation';\r\nimport { ConvertToDate, ConvertToHour } from '../../utils/ConvertDate';\r\n\r\nconst url = 'http://api.weatherapi.com/v1';\r\n\r\nexport const getLocation = () => {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tgeolocation.getCurrentPosition((err, position) => {\r\n  \t  if (err) {\r\n    \t  reject(err);\r\n    \t} else {\r\n    \t\tconst latitude = position.coords.latitude;\r\n\t\t\t\tconst longitude = position.coords.longitude;\r\n      \tresolve( {latitude, longitude} );\r\n    \t}\r\n  \t});\r\n\t});\r\n};\r\n\r\nexport function getDataFromAPI(location) {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tfetch(`${url}/forecast.json?key=${apiKey}&q=${location}&days=3`)\r\n\t\t\t.then(res => res.json())\r\n\t\t\t.then(data => {\r\n\t\t\t\tlet { location, current, forecast } = data;\r\n\t\t\t\tlocation = mapResToLoc(location);\r\n\t\t\t\tcurrent = mapResToCurrent(current);\r\n\t\t\t\tforecast = mapResToForecast(forecast);\r\n\t\t\t\tresolve({ location, current, forecast });\r\n\t\t\t})\r\n\t\t\t.catch(err => {\r\n\t\t\t\tconsole.log(err);\r\n\t\t\t})\r\n\t});\r\n\r\n\t// async await version\r\n\t// const fetchApi = async () => {\r\n\t// \ttry {\r\n\t// \t\tconst data = await fetch(`${url}/current.json?key=${apiKey}&q=${location}`);\r\n\t// \t\tconst { location, current } = data;\r\n\t// \t\tlocation = mapResToLoc(location);\r\n\t// \t\tcurrent = mapResToCurrent(current);\r\n\t// \t\treturn { location, current };\r\n\t// \t} catch(err) {\r\n\t// \t\tconsole.log(err);\r\n\t// \t}\r\n\t// }\r\n\t// return fetchApi();\r\n\r\n};\r\n\r\nfunction mapResToLoc(loc) {\r\n\treturn {\r\n\t\tcountry: loc.country,\r\n\t\tname: loc.name,\r\n\t\tregion: loc.region\r\n\t};\r\n}\r\n\r\nfunction mapResToCurrent(current) {\r\n\treturn {\r\n\t\tcloud: current.cloud,\r\n\t\tcondition: current.condition,\r\n\t\thumidity: current.humidity,\r\n\t\ttemp: current.temp_c,\r\n\t\tprecip: current.precip_in,\r\n\t\tpressure: current.pressure_in,\r\n\t\twind: current.wind_mph\r\n\t};\r\n}\r\n\r\nfunction mapResToForecast(forecast) {\r\n\tlet mapped = [];\r\n\tforecast.forecastday.map(item => {\r\n\t\t// convert date format\r\n\t\tlet date = item.date;\r\n\t\tdate = ConvertToDate(date);\r\n\r\n\t\tlet rawHour = item.hour;\r\n\t\tlet hour = [];\r\n\t\trawHour.map(item => {\r\n\t\t\tlet { \r\n\t\t\t\ttime,\r\n\t\t\t\tcloud,\r\n\t\t\t\tcondition,\r\n\t\t\t\thumidity,\r\n\t\t\t\ttemp_c,\r\n\t\t\t\tprecip_in,\r\n\t\t\t\tpressure_in,\r\n\t\t\t\twind_mph\r\n\t\t\t} = item;\r\n\t\t\ttime = ConvertToHour(time);\r\n\r\n\t\t\thour.push({\r\n\t\t\t\ttime: time,\r\n\t\t\t\tcloud: cloud,\r\n\t\t\t\tcondition: condition,\r\n\t\t\t\thumidity: humidity,\r\n\t\t\t\ttemp: temp_c,\r\n\t\t\t\tprecip: precip_in,\r\n\t\t\t\tpressure: pressure_in,\r\n\t\t\t\twind: wind_mph\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t\tmapped.push({\r\n\t\t\tdate: date,\r\n\t\t\thour: hour,\r\n\t\t});\t\r\n\t});\r\n\r\n\treturn mapped;\r\n}\r\n","D:\\project\\weatherweb\\weatherweb\\src\\containers\\pages\\Main.js",["88"],"import React, { useEffect } from 'react';\r\nimport Navbar from '../organisms/Navbar';\r\nimport GlassCard from '../../components/atoms/GlassCard';\r\nimport CurrentWeather from '../organisms/CurrentWeather';\r\nimport TodayPred from '../organisms/TodayPred';\r\nimport Forecast from '../organisms/Forecast';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { getLocation } from '../../config/weatherApi';\r\nimport { getData } from '../../config/redux/actionCreators';\r\n\r\nfunction Main(props) {\r\n  \r\n  const autoScanLoc = async () => {\r\n    try {\r\n      const inputLoc = await getLocation();\r\n      console.log(inputLoc);\r\n      await props.getData(`${inputLoc.latitude},${inputLoc.longitude}`);\r\n      // get forecast\r\n\r\n    } catch(err) {\r\n      console.log(err);\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    autoScanLoc();\r\n  }, [])\r\n\r\n  return (\r\n    <div className=\"Main\">\r\n      <Navbar />\r\n      <div className=\"content container-lg\">\r\n        <GlassCard>\r\n          <div className=\"col center\">\r\n            <div className=\"row center\">\r\n              <CurrentWeather />\r\n              <TodayPred />\r\n            </div>\r\n            <Forecast />\r\n          </div>\r\n        </GlassCard>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  getData: (loc) => dispatch(getData(loc)),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(Main);\r\n","D:\\project\\weatherweb\\weatherweb\\src\\components\\atoms\\Brand.js",[],"D:\\project\\weatherweb\\weatherweb\\src\\components\\molecules\\SearchBox.js",[],"D:\\project\\weatherweb\\weatherweb\\src\\components\\atoms\\SolidCard.js",[],"D:\\project\\weatherweb\\weatherweb\\src\\containers\\organisms\\Navbar.js",[],"D:\\project\\weatherweb\\weatherweb\\src\\components\\atoms\\GlassCard.js",[],"D:\\project\\weatherweb\\weatherweb\\src\\containers\\organisms\\CurrentWeather.js",["89"],"import React, { useEffect } from 'react';\r\nimport StatusIcon from '../../components/atoms/StatusIcon';\r\nimport SolidCard from '../../components/atoms/SolidCard';\r\nimport { connect } from 'react-redux';\r\n\r\nfunction CurrentWeather({ location, current }) {\r\n\t// useEffect(() => {\r\n\t// \tconsole.log('props pada currentWeather: ',{ location, current });\r\n\t// }, [ location, current]);\r\n\treturn (\r\n\t\t<div className=\"current-weather\">\r\n\t\t\t\r\n\t\t\t<div className=\"row center\">\r\n\t\t\t\t<span className=\"current-weather--temp\">{current.temp}°</span>\r\n\t\t\t\t<StatusIcon \r\n\t\t\t\t\ticonUrl={current.condition.icon} \r\n\t\t\t\t\ttext={current.condition.text}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\r\n\t\t\t<div className=\"current-weather--card\">\r\n\t\t\t\t<SolidCard>\r\n\t\t\t\t\t<span className=\"current-weather--loc-city\">{location.name}</span>\r\n\t\t\t\t\t<span className=\"current-weather--loc-region\">{location.region}, {location.country}</span>\r\n\t\t\t\t\t<div className=\"current-weather--detail\">\r\n\t\t\t\t\t\t<div className=\"row\">\r\n\t\t\t\t\t\t\t<div className=\"current-weather--detail--key\">\r\n\t\t\t\t\t\t\t\t<span>Wind</span>\r\n\t\t\t\t\t\t\t\t<span>Precipitation</span>\r\n\t\t\t\t\t\t\t\t<span>Cloud</span>\r\n\t\t\t\t\t\t\t\t<span>Humidity</span>\r\n\t\t\t\t\t\t\t\t<span>Pressure</span>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div className=\"current-weather--detail--value\">\r\n\t\t\t\t\t\t\t\t<span>{current.wind} mph</span>\r\n\t\t\t\t\t\t\t\t<span>{current.precip} in</span>\r\n\t\t\t\t\t\t\t\t<span>{current.cloud}%</span>\r\n\t\t\t\t\t\t\t\t<span>{current.humidity}%</span>\r\n\t\t\t\t\t\t\t\t<span>{current.pressure} in</span>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</SolidCard>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n\tlocation: state.location,\r\n\tcurrent: state.current\r\n})\r\n\r\nexport default connect(mapStateToProps, null)(CurrentWeather);","D:\\project\\weatherweb\\weatherweb\\src\\components\\atoms\\StatusIcon.js",["90"],"import React from 'react';\r\nimport iconUrl from '../../assets/icons/weather/day/sunny.png';\r\n\r\nexport default function StatusIcon({ iconUrl, text }) {\r\n\treturn (\r\n\t\t<div className=\"current-weather--icon col center\">\r\n\t\t\t<img src={iconUrl} alt=\"weather icon\"/>\r\n\t\t\t<span>{ text }</span>\r\n\t\t</div>\r\n\t);\r\n}","D:\\project\\weatherweb\\weatherweb\\src\\containers\\organisms\\TodayPred.js",["91","92","93","94","95"],"D:\\project\\weatherweb\\weatherweb\\src\\containers\\organisms\\Forecast.js",["96"],"import React from 'react';\r\nimport SolidCard from '../../components/atoms/SolidCard';\r\nimport weatherIconUrl from '../../assets/icons/weather/day/sunny.png';\r\nimport { connect } from 'react-redux';\r\n\r\nfunction Forecast({ forecast }) {\r\n\treturn (\r\n\t\t<div className=\"forecast\">\r\n\t\t\t<SolidCard>\r\n\t\t\t\t{\r\n\t\t\t\t\tforecast.map((item, key) => (\r\n\t\t\t\t\t\t<div key={key} className=\"forecast--item col\">\r\n\t\t\t\t\t\t\t<div className=\"forecast--day row\">\r\n\t\t\t\t\t\t\t\t<span>{item.date}</span>\r\n\t\t\t\t\t\t\t\t<span className=\"material-icons\">\r\n\t\t\t\t\t\t\t\t\texpand_more\r\n\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t\t{/* hour */}\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\titem.hour.map((hour, key) => (\r\n\t\t\t\t\t\t\t\t\t<div key={key} className=\"forecast--hour row\">\r\n\t\t\t\t\t\t\t\t\t\t<span className=\"forecast--hour--hour\">{hour.time}</span>\r\n\t\t\t\t\t\t\t\t\t\t<span className=\"forecast--hour--temp\">{hour.temp}°</span>\r\n\t\t\t\t\t\t\t\t\t\t<div className=\"forecast--hour--status row\">\r\n\t\t\t\t\t\t\t\t\t\t\t<img src={hour.condition.icon} alt=\"weather icon\"/>\r\n\t\t\t\t\t\t\t\t\t\t\t<span>{hour.condition.text}</span>\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t<div className=\"forecast--hour--wind\">\r\n\t\t\t\t\t\t\t\t\t\t\t<span>Wind</span>\r\n\t\t\t\t\t\t\t\t\t\t\t<span>{hour.wind} mph</span>\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t<div className=\"forecast--hour--precip\">\r\n\t\t\t\t\t\t\t\t\t\t\t<span>Precip</span>\r\n\t\t\t\t\t\t\t\t\t\t\t<span>{hour.precip} in</span>\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t<div className=\"forecast--hour--cloud\">\r\n\t\t\t\t\t\t\t\t\t\t\t<span>Cloud</span>\r\n\t\t\t\t\t\t\t\t\t\t\t<span>{hour.cloud}%</span>\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t<div className=\"forecast--hour--humidity\">\r\n\t\t\t\t\t\t\t\t\t\t\t<span>Humidity</span>\r\n\t\t\t\t\t\t\t\t\t\t\t<span>{hour.humidity}%</span>\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t<div className=\"forecast--hour--pressure\">\r\n\t\t\t\t\t\t\t\t\t\t\t<span>Pressure</span>\r\n\t\t\t\t\t\t\t\t\t\t\t<span>{hour.pressure} in</span>\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t))\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t))\r\n\t\t\t\t}\t\r\n\t\t\t</SolidCard>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n\tforecast: state.forecast,\r\n});\r\n\r\nexport default connect(mapStateToProps, null)(Forecast);","D:\\project\\weatherweb\\weatherweb\\src\\config\\weatherApi\\apiKey.js",[],"D:\\project\\weatherweb\\weatherweb\\src\\containers\\pages\\App.js",[],"D:\\project\\weatherweb\\weatherweb\\src\\utils\\ConvertDate.js",[],"D:\\project\\weatherweb\\weatherweb\\src\\components\\atoms\\predItem.js",[],{"ruleId":"97","replacedBy":"98"},{"ruleId":"99","replacedBy":"100"},{"ruleId":"101","severity":1,"message":"102","line":75,"column":32,"nodeType":"103","messageId":"104","endLine":75,"endColumn":34},{"ruleId":"101","severity":1,"message":"102","line":82,"column":20,"nodeType":"103","messageId":"104","endLine":82,"endColumn":22},{"ruleId":"105","severity":1,"message":"106","line":28,"column":6,"nodeType":"107","endLine":28,"endColumn":8,"suggestions":"108"},{"ruleId":"109","severity":1,"message":"110","line":1,"column":17,"nodeType":"111","messageId":"112","endLine":1,"endColumn":26},{"ruleId":"109","severity":1,"message":"113","line":2,"column":8,"nodeType":"111","messageId":"112","endLine":2,"endColumn":15},{"ruleId":"109","severity":1,"message":"114","line":1,"column":17,"nodeType":"111","messageId":"112","endLine":1,"endColumn":25},{"ruleId":"109","severity":1,"message":"115","line":2,"column":8,"nodeType":"111","messageId":"112","endLine":2,"endColumn":16},{"ruleId":"109","severity":1,"message":"116","line":5,"column":8,"nodeType":"111","messageId":"112","endLine":5,"endColumn":22},{"ruleId":"109","severity":1,"message":"117","line":7,"column":16,"nodeType":"111","messageId":"112","endLine":7,"endColumn":19},{"ruleId":"101","severity":1,"message":"118","line":57,"column":45,"nodeType":"103","messageId":"119","endLine":57,"endColumn":47},{"ruleId":"109","severity":1,"message":"116","line":3,"column":8,"nodeType":"111","messageId":"112","endLine":3,"endColumn":22},"no-native-reassign",["120"],"no-negated-in-lhs",["121"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'autoScanLoc'. Either include it or remove the dependency array.","ArrayExpression",["122"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'iconUrl' is defined but never used.","'useState' is defined but never used.","'graphUrl' is defined but never used.","'weatherIconUrl' is defined but never used.","'Bar' is defined but never used.","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","no-global-assign","no-unsafe-negation",{"desc":"123","fix":"124"},"Update the dependencies array to be: [autoScanLoc]",{"range":"125","text":"126"},[817,819],"[autoScanLoc]"]