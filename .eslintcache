[{"D:\\project\\weatherweb\\weatherweb\\src\\index.js":"1","D:\\project\\weatherweb\\weatherweb\\src\\config\\redux\\configureStore.js":"2","D:\\project\\weatherweb\\weatherweb\\src\\config\\redux\\reducer.js":"3","D:\\project\\weatherweb\\weatherweb\\src\\config\\redux\\actionCreators.js":"4","D:\\project\\weatherweb\\weatherweb\\src\\config\\weatherApi\\index.js":"5","D:\\project\\weatherweb\\weatherweb\\src\\containers\\pages\\Main.js":"6","D:\\project\\weatherweb\\weatherweb\\src\\components\\atoms\\Brand.js":"7","D:\\project\\weatherweb\\weatherweb\\src\\components\\molecules\\SearchBox.js":"8","D:\\project\\weatherweb\\weatherweb\\src\\components\\atoms\\SolidCard.js":"9","D:\\project\\weatherweb\\weatherweb\\src\\containers\\organisms\\Navbar.js":"10","D:\\project\\weatherweb\\weatherweb\\src\\components\\atoms\\GlassCard.js":"11","D:\\project\\weatherweb\\weatherweb\\src\\containers\\organisms\\CurrentWeather.js":"12","D:\\project\\weatherweb\\weatherweb\\src\\components\\atoms\\StatusIcon.js":"13","D:\\project\\weatherweb\\weatherweb\\src\\containers\\organisms\\TodayPred.js":"14","D:\\project\\weatherweb\\weatherweb\\src\\containers\\organisms\\Forecast.js":"15","D:\\project\\weatherweb\\weatherweb\\src\\config\\weatherApi\\apiKey.js":"16","D:\\project\\weatherweb\\weatherweb\\src\\containers\\pages\\App.js":"17","D:\\project\\weatherweb\\weatherweb\\src\\utils\\ConvertDate.js":"18","D:\\project\\weatherweb\\weatherweb\\src\\components\\atoms\\predItem.js":"19","D:\\project\\weatherweb\\weatherweb\\src\\containers\\organisms\\TodayGraph.js":"20","D:\\project\\weatherweb\\weatherweb\\src\\components\\molecules\\Dropdown.js":"21","D:\\project\\weatherweb\\weatherweb\\src\\containers\\organisms\\DropdownList.js":"22"},{"size":244,"mtime":1610797144883,"results":"23","hashOfConfig":"24"},{"size":288,"mtime":1610798567009,"results":"25","hashOfConfig":"24"},{"size":1469,"mtime":1611309638864,"results":"26","hashOfConfig":"24"},{"size":1013,"mtime":1611389370671,"results":"27","hashOfConfig":"24"},{"size":2559,"mtime":1610816781027,"results":"28","hashOfConfig":"24"},{"size":1999,"mtime":1611390788859,"results":"29","hashOfConfig":"24"},{"size":148,"mtime":1610681451586,"results":"30","hashOfConfig":"24"},{"size":317,"mtime":1611318056658,"results":"31","hashOfConfig":"24"},{"size":155,"mtime":1610695628257,"results":"32","hashOfConfig":"24"},{"size":415,"mtime":1611317285398,"results":"33","hashOfConfig":"24"},{"size":155,"mtime":1610698946852,"results":"34","hashOfConfig":"24"},{"size":1696,"mtime":1611224908801,"results":"35","hashOfConfig":"24"},{"size":303,"mtime":1610806495614,"results":"36","hashOfConfig":"24"},{"size":1608,"mtime":1611318623189,"results":"37","hashOfConfig":"24"},{"size":478,"mtime":1611390753231,"results":"38","hashOfConfig":"24"},{"size":56,"mtime":1610771704392,"results":"39","hashOfConfig":"24"},{"size":308,"mtime":1610797288083,"results":"40","hashOfConfig":"24"},{"size":1221,"mtime":1610813099502,"results":"41","hashOfConfig":"24"},{"size":546,"mtime":1611330420443,"results":"42","hashOfConfig":"24"},{"size":1234,"mtime":1611332217929,"results":"43","hashOfConfig":"24"},{"size":1905,"mtime":1611391396986,"results":"44","hashOfConfig":"24"},{"size":512,"mtime":1611391254090,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"rdbg20",{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"48"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"48"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"48"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"48"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"48"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\project\\weatherweb\\weatherweb\\src\\index.js",[],["96","97"],"D:\\project\\weatherweb\\weatherweb\\src\\config\\redux\\configureStore.js",[],"D:\\project\\weatherweb\\weatherweb\\src\\config\\redux\\reducer.js",[],"D:\\project\\weatherweb\\weatherweb\\src\\config\\redux\\actionCreators.js",[],"D:\\project\\weatherweb\\weatherweb\\src\\config\\weatherApi\\index.js",["98","99"],"import { apiKey } from './apiKey';\r\nimport geolocation from 'geolocation';\r\nimport { ConvertToDate, ConvertToHour } from '../../utils/ConvertDate';\r\n\r\nconst url = 'http://api.weatherapi.com/v1';\r\n\r\nexport const getLocation = () => {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tgeolocation.getCurrentPosition((err, position) => {\r\n  \t  if (err) {\r\n    \t  reject(err);\r\n    \t} else {\r\n    \t\tconst latitude = position.coords.latitude;\r\n\t\t\t\tconst longitude = position.coords.longitude;\r\n      \tresolve( {latitude, longitude} );\r\n    \t}\r\n  \t});\r\n\t});\r\n};\r\n\r\nexport function getDataFromAPI(location) {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tfetch(`${url}/forecast.json?key=${apiKey}&q=${location}&days=3`)\r\n\t\t\t.then(res => res.json())\r\n\t\t\t.then(data => {\r\n\t\t\t\tlet { location, current, forecast } = data;\r\n\t\t\t\tlocation = mapResToLoc(location);\r\n\t\t\t\tcurrent = mapResToCurrent(current);\r\n\t\t\t\tforecast = mapResToForecast(forecast);\r\n\t\t\t\tresolve({ location, current, forecast });\r\n\t\t\t})\r\n\t\t\t.catch(err => {\r\n\t\t\t\tconsole.log(err);\r\n\t\t\t})\r\n\t});\r\n\r\n\t// async await version\r\n\t// const fetchApi = async () => {\r\n\t// \ttry {\r\n\t// \t\tconst data = await fetch(`${url}/current.json?key=${apiKey}&q=${location}`);\r\n\t// \t\tconst { location, current } = data;\r\n\t// \t\tlocation = mapResToLoc(location);\r\n\t// \t\tcurrent = mapResToCurrent(current);\r\n\t// \t\treturn { location, current };\r\n\t// \t} catch(err) {\r\n\t// \t\tconsole.log(err);\r\n\t// \t}\r\n\t// }\r\n\t// return fetchApi();\r\n\r\n};\r\n\r\nfunction mapResToLoc(loc) {\r\n\treturn {\r\n\t\tcountry: loc.country,\r\n\t\tname: loc.name,\r\n\t\tregion: loc.region\r\n\t};\r\n}\r\n\r\nfunction mapResToCurrent(current) {\r\n\treturn {\r\n\t\tcloud: current.cloud,\r\n\t\tcondition: current.condition,\r\n\t\thumidity: current.humidity,\r\n\t\ttemp: current.temp_c,\r\n\t\tprecip: current.precip_in,\r\n\t\tpressure: current.pressure_in,\r\n\t\twind: current.wind_mph\r\n\t};\r\n}\r\n\r\nfunction mapResToForecast(forecast) {\r\n\tlet mapped = [];\r\n\tforecast.forecastday.map(item => {\r\n\t\t// convert date format\r\n\t\tlet date = item.date;\r\n\t\tdate = ConvertToDate(date);\r\n\r\n\t\tlet rawHour = item.hour;\r\n\t\tlet hour = [];\r\n\t\trawHour.map(item => {\r\n\t\t\tlet { \r\n\t\t\t\ttime,\r\n\t\t\t\tcloud,\r\n\t\t\t\tcondition,\r\n\t\t\t\thumidity,\r\n\t\t\t\ttemp_c,\r\n\t\t\t\tprecip_in,\r\n\t\t\t\tpressure_in,\r\n\t\t\t\twind_mph\r\n\t\t\t} = item;\r\n\t\t\ttime = ConvertToHour(time);\r\n\r\n\t\t\thour.push({\r\n\t\t\t\ttime: time,\r\n\t\t\t\tcloud: cloud,\r\n\t\t\t\tcondition: condition,\r\n\t\t\t\thumidity: humidity,\r\n\t\t\t\ttemp: temp_c,\r\n\t\t\t\tprecip: precip_in,\r\n\t\t\t\tpressure: pressure_in,\r\n\t\t\t\twind: wind_mph\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t\tmapped.push({\r\n\t\t\tdate: date,\r\n\t\t\thour: hour,\r\n\t\t});\t\r\n\t});\r\n\r\n\treturn mapped;\r\n}\r\n","D:\\project\\weatherweb\\weatherweb\\src\\containers\\pages\\Main.js",["100","101"],"D:\\project\\weatherweb\\weatherweb\\src\\components\\atoms\\Brand.js",[],"D:\\project\\weatherweb\\weatherweb\\src\\components\\molecules\\SearchBox.js",[],"D:\\project\\weatherweb\\weatherweb\\src\\components\\atoms\\SolidCard.js",[],"D:\\project\\weatherweb\\weatherweb\\src\\containers\\organisms\\Navbar.js",[],"D:\\project\\weatherweb\\weatherweb\\src\\components\\atoms\\GlassCard.js",[],"D:\\project\\weatherweb\\weatherweb\\src\\containers\\organisms\\CurrentWeather.js",["102"],"import React, { useEffect } from 'react';\r\nimport StatusIcon from '../../components/atoms/StatusIcon';\r\nimport SolidCard from '../../components/atoms/SolidCard';\r\nimport { connect } from 'react-redux';\r\n\r\nfunction CurrentWeather({ location, current }) {\r\n\t// useEffect(() => {\r\n\t// \tconsole.log('props pada currentWeather: ',{ location, current });\r\n\t// }, [ location, current]);\r\n\treturn (\r\n\t\t<div className=\"current-weather\">\r\n\t\t\t\r\n\t\t\t<div className=\"row center\">\r\n\t\t\t\t<span className=\"current-weather--temp\">{current.temp}°</span>\r\n\t\t\t\t<StatusIcon \r\n\t\t\t\t\ticonUrl={current.condition.icon} \r\n\t\t\t\t\ttext={current.condition.text}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\r\n\t\t\t<div className=\"current-weather--card\">\r\n\t\t\t\t<SolidCard>\r\n\t\t\t\t\t<span className=\"current-weather--loc-city\">{location.name}</span>\r\n\t\t\t\t\t<span className=\"current-weather--loc-region\">{location.region}, {location.country}</span>\r\n\t\t\t\t\t<div className=\"current-weather--detail\">\r\n\t\t\t\t\t\t<div className=\"row\">\r\n\t\t\t\t\t\t\t<div className=\"current-weather--detail--key\">\r\n\t\t\t\t\t\t\t\t<span>Wind</span>\r\n\t\t\t\t\t\t\t\t<span>Precipitation</span>\r\n\t\t\t\t\t\t\t\t<span>Cloud</span>\r\n\t\t\t\t\t\t\t\t<span>Humidity</span>\r\n\t\t\t\t\t\t\t\t<span>Pressure</span>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div className=\"current-weather--detail--value\">\r\n\t\t\t\t\t\t\t\t<span>{current.wind} mph</span>\r\n\t\t\t\t\t\t\t\t<span>{current.precip} in</span>\r\n\t\t\t\t\t\t\t\t<span>{current.cloud}%</span>\r\n\t\t\t\t\t\t\t\t<span>{current.humidity}%</span>\r\n\t\t\t\t\t\t\t\t<span>{current.pressure} in</span>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</SolidCard>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n\tlocation: state.location,\r\n\tcurrent: state.current\r\n})\r\n\r\nexport default connect(mapStateToProps, null)(CurrentWeather);","D:\\project\\weatherweb\\weatherweb\\src\\components\\atoms\\StatusIcon.js",["103"],"import React from 'react';\r\nimport iconUrl from '../../assets/icons/weather/day/sunny.png';\r\n\r\nexport default function StatusIcon({ iconUrl, text }) {\r\n\treturn (\r\n\t\t<div className=\"current-weather--icon col center\">\r\n\t\t\t<img src={iconUrl} alt=\"weather icon\"/>\r\n\t\t\t<span>{ text }</span>\r\n\t\t</div>\r\n\t);\r\n}","D:\\project\\weatherweb\\weatherweb\\src\\containers\\organisms\\TodayPred.js",["104","105"],"import React, { useState, useEffect } from 'react';\r\nimport SolidCard from '../../components/atoms/SolidCard';\r\nimport PredItem from '../../components/atoms/predItem';\r\nimport { connect } from 'react-redux';\r\n\r\nfunction TodayPred({ forecastToday, isLoading }) {\r\n\tuseEffect(() => {\r\n\t\tconsole.log('jalan',forecastToday);\r\n\t}, [forecastToday, isLoading]);\r\n\r\n\treturn (\r\n\t\t<div className=\"today-pred\">\r\n\t\t\t<div className=\"today-pred--card\">\r\n\t\t\t\t<SolidCard>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tisLoading ? \r\n\t\t\t\t\t\t\t<span>Loading...</span> :\r\n\t\t\t\t\t\t\t<div className=\"row\">\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tforecastToday.hour.map((item, key) => {\r\n\t\t\t\t\t\t\t\t\t\tif([5, 12, 17, 20].includes(key)) {\r\n\t\t\t\t\t\t\t\t\t\t\tlet label = '';\r\n\t\t\t\t\t\t\t\t\t\t\tswitch(key) {\r\n\t\t\t\t\t\t\t\t\t\t\t\tcase 5:\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tlabel = 'Morning';\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\t\t\tcase 12:\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tlabel = 'Afternoon';\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\t\t\tcase 17:\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tlabel= 'Evening';\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\t\t\tcase 20:\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tlabel= 'Late night';\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tlabel = 'Undefined';\r\n\t\t\t\t\t\t\t\t\t\t\t};\r\n\r\n\t\t\t\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t\t\t\t<PredItem \r\n\t\t\t\t\t\t\t\t\t\t\t\t\tkey={key} \r\n\t\t\t\t\t\t\t\t\t\t\t\t\tlabel={label}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\ticon={item.condition.icon}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\ttemp={item.temp}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\ttext={item.condition.text}\r\n\t\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t}\r\n\t\t\t\t</SolidCard>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n\tforecastToday: state.forecastToday,\r\n\tisLoading: state.isLoading\r\n});\r\n\r\nexport default connect(mapStateToProps, null)(TodayPred);","D:\\project\\weatherweb\\weatherweb\\src\\containers\\organisms\\Forecast.js",["106","107"],"D:\\project\\weatherweb\\weatherweb\\src\\config\\weatherApi\\apiKey.js",[],"D:\\project\\weatherweb\\weatherweb\\src\\containers\\pages\\App.js",[],"D:\\project\\weatherweb\\weatherweb\\src\\utils\\ConvertDate.js",[],"D:\\project\\weatherweb\\weatherweb\\src\\components\\atoms\\predItem.js",[],"D:\\project\\weatherweb\\weatherweb\\src\\containers\\organisms\\TodayGraph.js",["108","109","110"],"import React, { useState, useEffect } from 'react';\r\nimport SolidCard from '../../components/atoms/SolidCard';\r\nimport { connect } from 'react-redux';\r\nimport { Line, Bar } from 'react-chartjs-2';\r\n\r\nfunction TodayGraph({ chartDataset }) {\r\n\tlet chartData = {\r\n    labels: ['00:00', '03:00', '06:00', '09:00', '12:00', '15:00', '18:00', '21:00'],\r\n    datasets: [{\r\n      label: 'Temperature',\r\n      data: chartDataset,\r\n      backgroundColor: 'rgba(255, 99, 132, 0.2)',\r\n      borderColor: 'rgba(255, 99, 132, 1)',\r\n      borderWidth: 1\r\n    }]\r\n  };\r\n\r\n  return (\r\n  \t<div className=\"graph-container\">\r\n  \t\t<SolidCard>\r\n\t\t  \t<Line\r\n\t\t\t\t\tdata={chartData}\r\n\t\t\t\t\toptions={{\r\n\t\t\t\t\t\ttitle : {\r\n\t\t\t\t\t\t\tdisplay: true,\r\n\t\t\t\t\t\t\ttext: 'TEMPERATURE CHART ( °C )',\r\n\t\t\t\t\t\t\tfontSize: 16\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tlegend: { display: false },\r\n\t\t\t\t\t\tscales: {\r\n\t            yAxes: [{\r\n\t              ticks: {\r\n\t                beginAtZero: true\r\n\t              }\r\n\t            }]\r\n\t        \t},\r\n\t        \tresponsive: true,\r\n\t        \tmaintainAspectRatio: false\r\n\t\t\t\t\t}}\r\n\t\t\t\t/>\r\n\t\t\t</SolidCard>\r\n\t\t</div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n\tchartDataset: state.chartDataset\r\n});\r\n\r\nexport default connect(mapStateToProps, null)(TodayGraph);","D:\\project\\weatherweb\\weatherweb\\src\\components\\molecules\\Dropdown.js",["111"],"D:\\project\\weatherweb\\weatherweb\\src\\containers\\organisms\\DropdownList.js",[],{"ruleId":"112","replacedBy":"113"},{"ruleId":"114","replacedBy":"115"},{"ruleId":"116","severity":1,"message":"117","line":75,"column":32,"nodeType":"118","messageId":"119","endLine":75,"endColumn":34},{"ruleId":"116","severity":1,"message":"117","line":82,"column":20,"nodeType":"118","messageId":"119","endLine":82,"endColumn":22},{"ruleId":"120","severity":1,"message":"121","line":30,"column":6,"nodeType":"122","endLine":30,"endColumn":8,"suggestions":"123"},{"ruleId":"120","severity":1,"message":"124","line":38,"column":6,"nodeType":"122","endLine":38,"endColumn":17,"suggestions":"125"},{"ruleId":"126","severity":1,"message":"127","line":1,"column":17,"nodeType":"128","messageId":"129","endLine":1,"endColumn":26},{"ruleId":"126","severity":1,"message":"130","line":2,"column":8,"nodeType":"128","messageId":"129","endLine":2,"endColumn":15},{"ruleId":"126","severity":1,"message":"131","line":1,"column":17,"nodeType":"128","messageId":"129","endLine":1,"endColumn":25},{"ruleId":"116","severity":1,"message":"132","line":20,"column":45,"nodeType":"118","messageId":"133","endLine":20,"endColumn":47},{"ruleId":"126","severity":1,"message":"134","line":4,"column":8,"nodeType":"128","messageId":"129","endLine":4,"endColumn":22},{"ruleId":"126","severity":1,"message":"135","line":5,"column":10,"nodeType":"128","messageId":"129","endLine":5,"endColumn":17},{"ruleId":"126","severity":1,"message":"131","line":1,"column":17,"nodeType":"128","messageId":"129","endLine":1,"endColumn":25},{"ruleId":"126","severity":1,"message":"127","line":1,"column":27,"nodeType":"128","messageId":"129","endLine":1,"endColumn":36},{"ruleId":"126","severity":1,"message":"136","line":4,"column":16,"nodeType":"128","messageId":"129","endLine":4,"endColumn":19},{"ruleId":"116","severity":1,"message":"132","line":19,"column":38,"nodeType":"118","messageId":"133","endLine":19,"endColumn":40},"no-native-reassign",["137"],"no-negated-in-lhs",["138"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'autoScanLoc'. Either include it or remove the dependency array.","ArrayExpression",["139"],"React Hook useEffect has missing dependencies: 'forecast' and 'show'. Either include them or remove the dependency array. You can also do a functional update 'setShow(s => ...)' if you only need 'show' in the 'setShow' call.",["140"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'iconUrl' is defined but never used.","'useState' is defined but never used.","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","'weatherIconUrl' is defined but never used.","'connect' is defined but never used.","'Bar' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"141","fix":"142"},{"desc":"143","fix":"144"},"Update the dependencies array to be: [autoScanLoc]",{"range":"145","text":"146"},"Update the dependencies array to be: [forecast, isLoading, show]",{"range":"147","text":"148"},[941,943],"[autoScanLoc]",[1118,1129],"[forecast, isLoading, show]"]